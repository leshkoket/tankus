
	    * ПУПЕР ТАНКИ 3000 *
	* ПРОЕКТИРОВКА РАЗДЕЛА "GOBJ"


	КЛАСС "GameObject" ?
ОПИСАНИЕ КЛАССА: Абстрактный игровой объект. Как минимум, имеет последовательность таких событий как: родиться, обновления, умереть - события жизни. А также, может быть идентифицирован; распологаться и рисоваться в графическом холсте; оперировать интерфейсом управления игрой...

ЧЛЕНЫ КЛАССА:
	+ new( kind, position, size )
	+ position()/setPosition(p) - дробная точка в пикселях.
	+ size()/+ setSize(p) - дробный размер в пикселях (класса Точки) .
	+ kind:STR() - вид объекта. Обычно определяется в ресурсах.
	
	+ enumComponents()/componentsCount()/componentById(id) - функции получающщего доступа к расширениям объекта.
	appendComponent(c) - функции изменяющего доступа к расширениям объекта.
	
	+ goTo( targetPoint, properties, flags ) - установка целевой точки в пикселях, куда следует плавно переходить с указанными постоянными характеристиками: скоростью перемещения и поворачивания, а также флагами текущего перемещения.
	+ rotateTo( targetPoint, properties ) - установка целевой точки в пикселях, к какой следует поворачиваться,  с указанными характеристиками.
	+ cancelGoTo() - срочная остановка плавного перемещения.
	+ goToState:GameObjectGoToState() - на каком этапе совершает объект плавный переход к целевой точке? См. перечисления.
	+ goToFlags:GameObjectGoToFlags() - Флаги плавного перемещения
	
	+ bear( game ) - зарождение объекта, оперируя данным интерфейсом игры. Срабатывает только 1 раз, если не умер и ещё не зародился.
	+ update( game ) - обновление объекта, оперируя указанным интерфейсом игры. Срабатывает, + только если не умер, а если не зарождён ещё - то сперва зарождается.
	+ die( game ) - погибание объекта. Срабатывает только 1 раз, если был зарождён и ещё не умер.
	+ game() - выдача, сохранённого при событиях жизни, интерфейса игры.
	+ state() - состояние, на каком этапе жизни объект находится. См. константы.
	
	+ readMetaData( data ) - функция чтения именованных данных. Читает сначала базовые метаданные, потом дополнительные.
	
	| onBear() ={} - переопределяемое событие зарождения объекта. Ничего не делает по умолчанию.
	| onUpdate() ? - абстрактное событие обновления объекта.
	| onDie() ={} - переопределяемое событие умирания объекта. Бездейственно по умолчанию.
	
	| onReadMetaData(data) - переопраеделяемая функция дополнительного (для дочерних классов) чтения именованных данных. Пуста по умолчанию.
	
	| onGoTo() ={} - переопределяемое событие, когда назначена целевая точка перехода (вызвано goTo).
	| onStopGoTo(cancel) ={} - переопределяемое событие, когда переход к целевой точке завершен, возможно отменен при помощи cancelGoTo() (cancel=true), или возможно завершен удачно придя к цели (cancel=false).
	| onGoingTo() ={} - один из моментов во время обновления, когда производится переход к цели.

ПЕРЕЧИСЛЕНИЯ КЛАССА:
	# GameObjectState:
		+ JustCreated - когда объект только создан и может родиться.
		+ Living - состояние, когда объект уже создан и может обновляться.
		+ Dead - состояние, когда объект умер, и ничего больше не может.
	
	# GameObjectGoToState:
		+ Start - когда плавный переход к целевой точке только начался. Предварительный этап.
		+ Rotating - когда объект поворачивается к целевой точке. 1 этап.
		+ Going - когда поворачивание закончено и объект перемещает свою позицию теперь. 2 этап.
		+ Stopped - когда объект нашёл цель и остановился
		+ Cancelled - когда объект срочно прервал операцию, или не нашёл цель.
		+ None - когда объект не совершает плавное движение к цели.


	КЛАСС "GameObjectGoToProperties"
ОПИСАНИЕ КЛАССА: набор характеристик плавного перехода.
ЧЛЕНЫ КЛАССА:
	+ velocity - скорость плавного движения в пикселях/сек.
	+ rotatingVelocityRad - скорость плавного поворачивания в радианах/сек.
	+ new( ... )
	+@ byDefault() - создание экземпляра по умолчанию
	
	
	КЛАСС "GameObjectComponent"
ОПИСАНИЕ КЛАССА: Расширение для игрового объекта - компонент. Добавляется к объекту, чтобы изменить его поведение; выгодно сочетать разные комбинации расширений, чем создавать отдельный класс для каждой комбинации.
Например: объекты CatWithClawsWithQueue, CatWithClaws и т.д. не так хорошо, как объект Cat с добавляемыми компонентами Claws, Queue в каком угодно сочетании, и возможностью добавить новые.
Функции реагирования on- вызываются самим объектом при соотв. его событии.

ЧЛЕНЫ КЛАССА:
	+ linkedObject:GameObject() - объект, к которому привязан компонент.
	+ game:GameInterface() - делегирует интерфейс игры связанного объекта.
	+ linkToObject( obj ) - привязка компонента к объекту, если этого ещё не случилось; вызывается при добавлении компонента объектом.
	+ unlinkFromObject() - отвязка компонента от ранее привязанного объекта, если имеется. Вызывается при уничтожении объекта.
	
	+ onBear()={}, onUpdate()=?, onDie()={} - функции реагирующие на события жизни объекта. По умолчанию onUpdate абстрактна, остальные ничего не делают.
	+ onLinkToObject()={}, onUnlinkFromObject()={} - функции реагирования на привязку/отвязку компонента. При реакции на привязку компонент уже знает свой объект, а на отвязку - ещё не забыл его. При реакции привязки (или при реакции рождения) компонент может найти другие нужные ему компоненты. При реакции отвязки (или реакции погибания) компонент может разгрузить большие данные.
	

	КЛАСС "Character"
	(Наследует: "GameObject")
ОПИСАНИЕ КЛАССА: Персонаж - это объект способный сражаться и куда нибудь самостоятельно двигаться, если указать что делать. В общем смысле это абстрактный объект. Также, может быть расширен компонентами Отрисовки и компонентами Поведения.
Компоненты поведения: 
	GunCharacterBehavior.
ЧЛЕНЫ КЛАССА:
	+ new( kind, position, drawer, behaviors[] )
	+ drawer:GameObjectComponent() - расширение для отрисовки данного персонажа. 
	+ enumBehaviors:GameObjectComponent[]() - расширения управляющие действиями персонажа.
	+ properties : CharacterProperties() - набор свойств персонажа. См. подробнее этот класс.
	
	+ gun : GunCharacterBehavior() - управление пушкой. При каждом обновлении назначает ей собственные свойства из properties().ofGun.
	+ strikeGun(), rotateGunTo(targetPoint, strikeThen:BOOL) - базовые функции упрпвления пушкой, делегирумые из gun().
	
	+ goTo( targetPoint, properties=null ) * - переопределение плавного перехода, где по-умолчанию (при null), в качестве свойств перехода считаются собственные свойства this.properties().ofGoTo.
	+ rotateTo( targetPoint, properties=null ) * - переопределение плавного поворота к точке, со свойствами перехода равными собственным в this.properties().ofGoTo, по умолчанию.
	

	КЛАСС "CharacterProperties"
ОПИСАНИЕ КЛАССА: Набор свойств персонажа, для боя и взаимодействий с окружающей средой и т.п....
ЧЛЕНЫ КЛАССА:
	+ currentHealth - текущее здоровье, в пределах до максимального.
	
	+ maxHealth - макс.здоровье, не меньше 0.
	+ colorIndex: CharacterColorIndex - цвет из имеющихся, в который персонаж будет покрашен.
	+ ofGoTo : GoToProperties [+g] - параметры для обычного плавного движения.
	+ ofGun : GunProperties [+g] - параметры пушки.
	
	+ restoreCurrent() - восстановление всех текущих свойств до предельных/изначальных.
	+ getColorString():STR - строка цвета, стоящая за выбранным индексом цвета.
	
ПЕРЕЧИСЛЕНИЯ И КОНСТАНТЫ КЛАССА:
	+@ COLOR_STRINGS - имена строк встроенных цветов соотв. индексов.
	+@ COLORS_COUNT - количество встроенных цветов.
	
	CharacterColorIndex... - индексы каждого цвета.



	КЛАСС "PlayerCharacter"
	(Наследует: "Character")
ОПИСАНИЕ КЛАССА: персонаж, которым управляет игрок.
Компоненты поведения:
	ControlPCBehavior.
ЧЛЕНЫ КЛАССА:
	cursorPoint: Point() - в каком месте, в пикселях, сейчас находится курсор. Эта точка впоследствии станет целью движения/поворота/поворота башни.
	

	КЛАСС "AICharacter"
	(Наследует: "Character")
ОПИСАНИЕ КЛАССА: персонаж управляемый компьютером (искусственным интеллектом).
Компоненты поведения: 
	EvasionAICBehavior,
	PersecutionAICBehavior,
	AttackAICBehavior.
	
ЧЛЕНЫ КЛАССА:
	+ enemyCharacter : Character() - персонаж, выбранный для атаки и преследования.
	+ persecutionBehavior(), evasionBehavior(), attackBehavior() - компоненты поведения, управляющие преследованием цели, убеганием и атакой в цель.


	КЛАСС "Projectile"
	(Наследует: "GameObject")
ОПИСАНИЕ КЛАССА: Объект, летящий с некоторой скоростью, и при столкновении с персонажем, уничтожающийся и наносящий ему урон. Также уничтожается при достижении лимита расстояния.
ЧЛЕНЫ КЛАССА:
	+ properties : ProjectileProperties() - характеристеки, оказывающие влияние на урон по персонажу.
	+ sender:Character() - объект, выпустивший этот снаряд (посылатель).
	+ new( kind, properties, sender, pos, size, rotationRad )
	
	
	КЛАСС "ProjectileProperties"
ЧЛЕНЫ КЛАССА:
	+ velocity - скорость перемещения в пикс./сек.
	+ damage - сколько здоровья отнимется у персонажа при столкновении.


	КЛАСС "Maze"
	(Наследует: GameObject)
ОПИСАНИЕ КЛАССА: Лабиринт - объект, представляющий собой сетку из ячеек-препятствий (блоков) и свободных ячеек. С блоками сталкиваются другие объекты и останавливаются. Со свободными ячейками объекты тоже могут взаимодействовать при наступлении на них, но не останавливаются от этого.
Типы ячеек: пустая (номер 0) - Абсолютно Свободная ячейка без каких либо взаимодействий; Активная Свободная (номер <0) - свободная ячейка с возможным взаимодействием; Активное Препятствие (номер >0) - ячейка, на которую нельзя пройти.

Компоненты поведения:
	MazeCollisionsChecker,
	MazePathFinder.
Компоненты отрисовки:
	MazeDrawer,
	MazeCellDrawer.
	
ЧЛЕНЫ КЛАССА:
	+ new( cellsX, cellsY )
	+ cellsCountX(), + cellsCountY() - количество ячеек по обеим координатам.
	+ cell( iX, iY ):INT / setCell( iX, iY, value:INT ) - значение ячейки по указанным 2 индексам, и её установка.
	+ cellSize():Point / + setCellSize(p:Point) - размер ячейки в пикселях, для её отображения. На основе этого и количества ячеек вычисляется общий размер лабиринта (size()). 
	+ isObstacleCell( iX, iY ):BOOL - является ли ячейка в заданных индексах существующим препятствием (т.е., > 0).
	+ isFreeCell( iX, iY ):BOOL - является ли ячейка в заданных индексах существующей проходной (т.е., <= 0).
	+ cellPointByIndexes( indexes:Point, [midIndex=0:0] ):Point - точка по заданным координатам ячейки с учётом положения точки поворота относительно размеров объекта (midIndex).
	+ cellIndexesByPoint( point, [midIndex=0:0] ) - индекс ячейки по заданной точке, с учётом точки поворачивания относительно размеров объекта (midIndex).
	findPath : MazePath() - вызывает pathFinder.find()  для себя.
	pathFinder : MazePathFinder() - компонент, ищущий последовательность индексов ячеек от начального до конечного - путь, - одолевая ячейки-препятствия.
	
	+ @fromText( text:STR[] ):Maze / + toText():STR[] - опреации чтения текста и получения нового лабиринта из него, и преобразования лабиринта в текст. Текст имеет след.формат: 1-9 - номера ячеек препятствий, 0 - свободная, каждая новая строчка - новая строчка лабиринта (Y коорд.), каждый след. символ в строчке - след.X ячейки.
	+ @fromPathText( text:STR, pathOut:MazePath ) / toPathText( pathIn:MazePath ):STR[] - создание лабиринта из текста + определение в нём пути, и преобразования лабиринта в текст с входным путём. Ячейки пути имеют след.формат: a..z - ячейки пути с порядковым индексом 0..25.

	
	КЛАСС "MazePath"
ОПИСАНИЕ КЛАССА: набор индексов ячеек от начального до конечного.
ЧЛЕНЫ КЛАССА:
	steps():LIST<Point> -  все индексы по которым надо ходить. По ним вы гарантированно переместитесь к цели.
	middleSteps():LIST<Point> - все индексы, кроме начального и целевого, по которым надо ходить.
	middleEndSteps():LIST<Point> - все индексы, кроме начального, по которым нужно ходить. По ним вы гарантированно переместитесь к цели, при этом всегда меняя положение.
	startStep():Point - начальный входной индекс (текущее положение).
	endStep():Point - конечный входной индекс (целевое положение).
	isFound():BOOL - успешность нахождения пути.
	@createFound( allSteps ) - создание успешно найденного пути по всем индексам.
	@createNotFound() - создание ненайденного пути без каких либо точек.


	Статический КЛАСС "Painter"
Описание: раскрашиватель (не равно отрисовщик) содержит набор функций, каждая из которых отрисовывает конкретный, определенный её именем вид граф. обьекта, по параметрам каждого его слоя.
В отличии от отрисовщика, красит только объекты общего граф. назначения, из которых состоят объекты игровые. Виды граф. объектов: все формы, текст с форматом...
Например: drawRect( [ {color: ..., type=PAINT_TYPE_CONTOUR, lineWidth:...}, {...}, ... } ).
Члены статического класса:
	+@ paint<X>( data:<XData>, style:PaintingStyle ) - отрисовка граф. объекта вида <X> с данными для него.


	КЛАСС "PaintingStyle"
ОПИСАНИЕ КЛАССА: Стиль граф. объекта, состоящий из списка подстилей для каждого его слоя.
ЧЛЕНЫ КЛАССА:
	+ new( layers : LayerPaintingStyle[] )
	+ layers():LayerPaintingStyle


	КЛАСС "LayerPaintingStyle"
ОПИСАНИЕ КЛАССА: Стиль для 1 слоя граф. объекта.
ЧЛЕНЫ КЛАССА: 
	+ fill : STR
	+ stroke : STR
	+ strokeWidth : FLOAT
	...
	
	
	




