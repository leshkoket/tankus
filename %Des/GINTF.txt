
		* ПУПЕРТАНКИ 3000 *
	* ПРОЕКТИРОВКА РАЗДЕЛА  "GINTF" *
	
	
	
	
	Класс "GameInterface"
Описание класса: Интерфейс управления игрой.
Члены класса:
	+ say(message) - добавляет сообщение в лог, видимый пользователю в режиме разработки.
	+ sayStatus(sectionId, message) - устанавливает сообщение о тек. состоянии в полосу состояния.
	+ time():GameTime ? - абстрактная функция выдачи обьекта игрового времени.
	+ random():Random ? - абстрактная функция выдачи обьекта Г.П.С.Ч..
	+ config():GameConfig ? - абстрактная функция выдачи объекта с настройками игры.
	+ resources():GameResourcesInterface ? - абстрактная функция выдачи интерфейса управления ремурсами.
	+ camera():GameCameraInterface ? - абстрактная функция выдачи интерфейса управления камерой.
	+ level():GameLevelInterface ? - абстрактная фунекия выдачи интерфейса управления уровнем и объектами в нём.
	
	+ graphics():Object ? - абстрактная функция выдачи контекта графики, полученного из graphicsNode().
	+ graphicsNode():Object ? - абстрактная функция выдачи DOM-узла графики, на котором самая игра рисуется.
	

	Класс "GameTime"
Описание класса: класс, оперирующий тем, сколько времени прошло с начала игры, какая сейчас по счёту итерация и т.п..
Члены класса:
	+ elapsedMsec():FLOAT - количество пройденных миллисекунд за игру с момента сброса или создания объекта данного класса.
	+ elapsedIndex():INT - счётчик количества пройденных итераций за игру с момента сбооса или создания экземпляра данного класса.
	+ nowElapsedMsec() - количества миллисекунд, пройденных с момента последней фиксации итерации.
	
	+ passIteration() - изменение данных в связи с прохождением очередной итерации игры, и фиксация новой итерации.
	+ reset() - сброс пройденных миллисекунд за игру, за итерацию и счётчика итерации.
	
	+ getShiftByNow:FLOAT( shiftBySec:FLOAT ) - определяет, на сколько нужно совершить смещение в данный момент, чтобы суммируя так 1 секунду, получить почти-почти равное указанному смещению за секунду (с некоторой возможной погрешностью). Применяется, для работы с реальными скоростями... 
	
	
	Класс "Random"
Описание класса: генерирует как будто бы случайные числа.
Члены класса:
	+ seed:FLOAT()/setSeed(value:FLOAT) - получает/задаёт некое число, наз. зерном случайности, от которого зависит, какое случайное число будет сгенерировано.
	+ getFloat( start:FLOAT, finish:FLOAT ) - случайное дробное число между заданных границ. Выдача точно финального едва ли возможна.
	+ getInt( start:INT, finish:INT ) - случайное целое число между заданных границ. Выдача точно финального возможна.


	Класс "GameConfig"
Описание класса: структурированный набор данных, настраивающих игру.
Члены класса:
	<подробнее описываются в самом классе>



	Класс "GameResourcesInterface" ?
Описание класса: Интерфейс управления ресурсами, загружаемыми в игру.
Члены класса:
	+ loadResource:Object( type, kind ) - загрузка абстрактного ресурсного объекта по его категории (типу) и виду.


	Класс "GameCameraInterface"
Описание класса: Интерфейс управления камерой. 
Члены класса:
	displayX( worldX )? / displayY( worldY )? - вычисление координат отображения по входящим мировым координатам. Обычно используется для отображения реальных объектов, при смещении камеры.
	worldX( displayX )? / worldY( displayY )? - вычисление координат мировых по входящим координатам отображения. Обычно используется для применения позиций курсора к реальным позициям объектов. 
	goToWorldTargetXY( worldTX, worldTY )? - задание целевых реальных координат, к которым должен перемещаться центр экрана. Например: если целевая точка - 0:0, то камера будет перемещаться к этой точке вверх и влево, пока не достигнет её.
	moveToWorldTargetXY( worldTX, worldTY )? - задание целевых реальных координат, к которым центр экрана должен незамедлительно быть установлен.


	Класс "GameLevelInterface" ?
Описание класса: Интерфейс управления игровым уровнем и объектами в нём.

Члены класса:
	+ bearNewObject:Object( params )? - зарождение нового объекта в уровень, с заданными параметрами, см. подробнее GameObjectCreationParams.  Возвращает созданный зарождённый объект.
	+ bearObject:BOOL( obj )? - зарождение существующего и ещё не рождённого объекта в уровень. Возвращает удачность операции. 
	+ killObject:BOOL( obj:Object )? - уничтожение абстрактного объекта. Возвращает удачность операции.
	+ specialObject( index ):OBJ - Возвращает особый объект заданого индекса.
	
Перечисления класса:
	GameObjectSpecialIndex = 
		+ Land
		+ PlayerCharacter
		+ Maze
		+ MazePathFinder
	
	
	Класс GameObjectCreationParams
Описание класса: простые данные для описания настроек создания объекта.
Члены класса:
	+ kind - строка разновидности объекта
	+ x,y - дробные мировые координаты.
	+ metaData : Map = {} - дополнительные именованные данные, читаемые объектом.






	
